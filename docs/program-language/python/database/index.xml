<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xiaoc0519</title>
    <link>https://xiaoc0519.github.io/docs/program-language/python/database/</link>
    <description>Recent content on Xiaoc0519</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 May 2023 17:05:52 +0800</lastBuildDate><atom:link href="https://xiaoc0519.github.io/docs/program-language/python/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MongoDB</title>
      <link>https://xiaoc0519.github.io/docs/program-language/python/database/mongodb/</link>
      <pubDate>Mon, 29 May 2023 17:05:52 +0800</pubDate>
      
      <guid>https://xiaoc0519.github.io/docs/program-language/python/database/mongodb/</guid>
      <description>MongoDB#import pymango MongoDB ✈
WORKFLOW#myclient = pymongo.MongoClient(&amp;#39;mongodb://localhost:27017/&amp;#39;) db = mongo_client.admin db.authenticate(&amp;#39;用户名&amp;#39;, &amp;#39;密码&amp;#39;) # 创建集合 db.createCollection(name, options) # 删除集合 db.collectionName.drop() # 指定数据库和集合 db = client.test # 获取数据库 db = client[&amp;#39;test&amp;#39;] collection = db.stu # 指定集合 collection = db[&amp;#39;stu&amp;#39;] 插入#db.collection_name.insert(document) # mongodb中文档的格式是json格式 #增加一条 stu1={&amp;#39;id&amp;#39;:&amp;#39;001&amp;#39;,&amp;#39;name&amp;#39;:&amp;#39;zhangsan&amp;#39;,&amp;#39;age&amp;#39;:10} result = collection.insert_one(stu1) #增加多条 stu2={&amp;#39;id&amp;#39;:&amp;#39;002&amp;#39;,&amp;#39;name&amp;#39;:&amp;#39;lisi&amp;#39;,&amp;#39;age&amp;#39;:15} stu3={&amp;#39;id&amp;#39;:&amp;#39;003&amp;#39;,&amp;#39;name&amp;#39;:&amp;#39;wangwu&amp;#39;,&amp;#39;age&amp;#39;:20} result = collection.insert_many([stu2,stu3]) 删除##可以直接使用remove方法删除指定的数据 result = collection.remove({&amp;#39;name&amp;#39;: &amp;#39;zhangsan&amp;#39;}) #使用delete_one()删除一条数据 result = collection.delete_one({&amp;#34;name&amp;#34;:&amp;#34;zhangsan&amp;#34;}) #delete_many()删除多条数据 result = collection.</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://xiaoc0519.github.io/docs/program-language/python/database/redis/</link>
      <pubDate>Mon, 29 May 2023 17:05:52 +0800</pubDate>
      
      <guid>https://xiaoc0519.github.io/docs/program-language/python/database/redis/</guid>
      <description>REDIS#import redis WORKFLOW#redis_conn = redis.Redis(host=&amp;#34;192.168.31.196&amp;#34;, port=6379,password=&amp;#34;123456&amp;#34;) # 连接池 redis_pool = redis.ConnectionPool(host=&amp;#39;127.0.0.1&amp;#39;, port= 6379, password= &amp;#39;your pw&amp;#39;, db= 0) redis_conn = redis.Redis(connection_pool= redis_pool) redis_conn.set(&amp;#39;name1&amp;#39;, &amp;#39;value1) #添加 redis_conn.get(&amp;#39;name1&amp;#39;) #获取 STRING 字符串#一个键对应一个值
# 设置单个键值 set(name, value[, ex=None, px=None, nx=False, xx=False]) # ex：过期时间（秒），时间到了后redis会自动删除 # px：过期时间（毫秒），时间到了后redis会自动删除。ex、px二选一即可 # nx：如果设置为True，则只有name不存在时，当前set操作才执行 # xx：如果设置为True，则只有name存在时，当前set操作才执行 redis_conn.set(&amp;#39;name_2&amp;#39;, &amp;#39;ZZZ_2&amp;#39;) # 获取单个值 redis_conn.get(&amp;#39;name_1&amp;#39;) # 设置多个键值 mset(*args, **kwargs) redis_conn.mset(name_1= &amp;#39;ZZZ1&amp;#39;, name_2= &amp;#39;ZZZ2&amp;#39;) name_dict = { &amp;#39;name_4&amp;#39; : &amp;#39;ZZZ4&amp;#39;, &amp;#39;name_5&amp;#39; : &amp;#39;ZZZ5&amp;#39; } redis_conn.</description>
    </item>
    
    <item>
      <title>Sql</title>
      <link>https://xiaoc0519.github.io/docs/program-language/python/database/sql/</link>
      <pubDate>Mon, 29 May 2023 17:05:52 +0800</pubDate>
      
      <guid>https://xiaoc0519.github.io/docs/program-language/python/database/sql/</guid>
      <description>SQL#import pymysql WORKFLOW## 连接数据库 db = pymysql.connect(host=&amp;#39;localhost&amp;#39;, port = 3366, user=&amp;#39;root&amp;#39;, password=&amp;#39;123456&amp;#39;, database=&amp;#39;DB&amp;#39;, charset=&amp;#39;utf8mb4) # 建立游标 cur = db.cursor() # 使用 execute() 方法执行 SQL，如果表存在则删除 cursor.execute(&amp;#34;DROP TABLE IF EXISTS EMPLOYEE&amp;#34;) # 执行sql语句 sql = &amp;#34;DELETE FROM STUDENT WHERE NAME=&amp;#39;ZZZ&amp;#39;&amp;#34; cursor.execute(sql) # 提交修改 db.commit() # 关闭数据库连接 插入#sql = &amp;#34;INSERT INTO STUDENT(NAME,AGE, SEX, ID)VALUES (&amp;#39;ZZZ&amp;#39;, 22, 女,1)&amp;#34; #try语句防止连接数据库时发生错误 try: cursor.execute(sql) db.commit() print(&amp;#34;数据插入成功&amp;#34;) except: # 如果发生错误则回滚 db.rollback() 查询#sql = &amp;#34;SELECT * FROM STUDENT WHERE NAME=&amp;#39;ZZZ&amp;#39;&amp;#34; try: cursor.</description>
    </item>
    
  </channel>
</rss>
